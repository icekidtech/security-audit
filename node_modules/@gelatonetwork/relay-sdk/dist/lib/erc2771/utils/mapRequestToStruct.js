"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapRequestToStruct = void 0;
const ethers_1 = require("ethers");
const utils_1 = require("../../../utils");
function mapRequestToStruct(request, override) {
    var _a, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
        if (!override.userDeadline && !request.userDeadline) {
            throw new Error(`userDeadline is not found in the request, nor fetched`);
        }
        if ((0, utils_1.isConcurrentRequest)(request)) {
            const concurrentOverride = override;
            return {
                userDeadline: (_a = concurrentOverride.userDeadline) !== null && _a !== void 0 ? _a : request.userDeadline,
                chainId: request.chainId,
                target: (0, ethers_1.getAddress)(request.target),
                data: request.data,
                user: (0, ethers_1.getAddress)(request.user),
                userSalt: (_b = concurrentOverride.userSalt) !== null && _b !== void 0 ? _b : request.userSalt,
            };
        }
        else {
            const nonConcurrentOverride = override;
            if (nonConcurrentOverride.userNonce === undefined &&
                request.userNonce === undefined) {
                throw new Error(`userNonce is not found in the request, nor fetched`);
            }
            return {
                userDeadline: (_c = nonConcurrentOverride.userDeadline) !== null && _c !== void 0 ? _c : request.userDeadline,
                chainId: request.chainId,
                target: (0, ethers_1.getAddress)(request.target),
                data: request.data,
                user: (0, ethers_1.getAddress)(request.user),
                userNonce: nonConcurrentOverride.userNonce !== undefined
                    ? nonConcurrentOverride.userNonce
                    : request.userNonce,
            };
        }
    });
}
exports.mapRequestToStruct = mapRequestToStruct;
