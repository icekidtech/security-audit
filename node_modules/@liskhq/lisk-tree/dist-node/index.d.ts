/// <reference types="node" />
import { MerkleTree } from './merkle_tree/merkle_tree';
export declare const regularMerkleTree: {
    verifyProof: (queryHashes: readonly Buffer[], proof: import("./merkle_tree/types").Proof, rootHash: Buffer) => boolean;
    verifyDataBlock: (queryData: readonly Buffer[], proof: import("./merkle_tree/types").Proof, rootHash: Buffer) => boolean;
    calculateRootFromUpdateData: (updateData: Buffer[], proof: {
        siblingHashes: Buffer[];
        indexes: number[];
        size: number;
    }) => Buffer;
    calculateMerkleRoot: ({ value, appendPath, size }: import("./merkle_tree/types").MerkleRootInfo) => {
        root: Buffer;
        appendPath: Buffer[];
        size: number;
    };
    calculateMerkleRootWithLeaves: (data: Buffer[]) => Buffer;
    MerkleTree: typeof MerkleTree;
    calculateRootFromRightWitness: (idx: number, appendPath: Buffer[], rightWitness: Buffer[]) => Buffer;
    verifyRightWitness: (idx: number, appendPath: Buffer[], rightWitness: Buffer[], root: Buffer) => boolean;
    calculateRightWitness: (size: number, values: Buffer[]) => Buffer[];
};
export { MerkleTree };
