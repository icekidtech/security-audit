/// <reference types="node" />
import { Proof, Database } from './types';
export declare class MerkleTree {
    private _root;
    private _size;
    private readonly _preHashedLeaf;
    private readonly _db;
    private readonly _hashToValueMap;
    private readonly _locationToHashMap;
    constructor(options?: {
        preHashedLeaf?: boolean;
        db?: Database;
    });
    init(initValues: Buffer[]): Promise<void>;
    get root(): Buffer;
    get size(): number;
    append(value: Buffer): Promise<Buffer>;
    generateProof(queryData: ReadonlyArray<Buffer>): Promise<Proof>;
    generateRightWitness(idx: number): Promise<Buffer[]>;
    update(idxs: number[], updateData: ReadonlyArray<Buffer>): Promise<Buffer>;
    toString(): Promise<string>;
    private _getSiblingHashes;
    private _getHeight;
    private _generateLeaf;
    private _generateBranch;
    private _build;
    private _getAppendPathNodes;
    private _getIndices;
    private _getAppendPathHashes;
    private _getNode;
    private _printNode;
}
