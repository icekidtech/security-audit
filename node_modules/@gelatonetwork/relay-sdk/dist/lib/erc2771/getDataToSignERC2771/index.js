"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDataToSignERC2771 = void 0;
const utils_1 = require("../../../utils");
const network_1 = require("../../network");
const utils_2 = require("../utils");
function getDataToSignERC2771(payload, config) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const { request, signerOrProvider } = payload;
            const { chainId } = request;
            const isSupported = yield (0, network_1.isNetworkSupported)({ chainId }, config);
            if (!isSupported) {
                throw new Error(`Chain id [${chainId.toString()}] is not supported`);
            }
            if ((0, utils_1.isConcurrentRequest)(request)) {
                const type = payload.type;
                const { struct, typedData } = yield (0, utils_2.populatePayloadToSign)({
                    request,
                    type,
                    signerOrProvider,
                }, config);
                return {
                    struct,
                    typedData,
                };
            }
            else {
                const type = payload.type;
                const { struct, typedData } = yield (0, utils_2.populatePayloadToSign)({ request, type, signerOrProvider }, config);
                return {
                    struct,
                    typedData,
                };
            }
        }
        catch (error) {
            const errorMessage = error.message;
            throw new Error(`GelatoRelaySDK/getDataToSignERC2771: Failed with error: ${errorMessage}`);
        }
    });
}
exports.getDataToSignERC2771 = getDataToSignERC2771;
