"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.populateOptionalUserParameters = void 0;
const constants_1 = require("../constants");
const calculateDeadline_1 = require("./calculateDeadline");
const getUserNonce_1 = require("./getUserNonce");
const isConcurrentRequest_1 = require("./isConcurrentRequest");
const generateSalt_1 = require("./generateSalt");
const getProviderChainId_1 = require("./getProviderChainId");
function populateOptionalUserParameters(payload, config) {
    return __awaiter(this, void 0, void 0, function* () {
        if ((0, isConcurrentRequest_1.isConcurrentRequest)(payload.request)) {
            const { request } = payload;
            const parametersToOverride = {};
            if (!request.userDeadline) {
                parametersToOverride.userDeadline =
                    (0, calculateDeadline_1.calculateDeadline)(constants_1.DEFAULT_DEADLINE_GAP);
            }
            if (!request.userSalt) {
                parametersToOverride.userSalt = (0, generateSalt_1.generateSalt)();
            }
            return parametersToOverride;
        }
        else {
            const { type, signerOrProvider, request } = payload;
            const parametersToOverride = {};
            if (!request.userDeadline) {
                parametersToOverride.userDeadline =
                    (0, calculateDeadline_1.calculateDeadline)(constants_1.DEFAULT_DEADLINE_GAP);
            }
            if (request.userNonce === undefined) {
                if (!signerOrProvider || !signerOrProvider.provider) {
                    throw new Error("Missing provider.");
                }
                const providerChainId = yield (0, getProviderChainId_1.getProviderChainId)(signerOrProvider);
                if (request.chainId !== providerChainId) {
                    throw new Error(`Request and provider chain id mismatch. Request: [${request.chainId.toString()}], provider: [${providerChainId.toString()}]`);
                }
                parametersToOverride.userNonce = yield (0, getUserNonce_1.getUserNonce)({
                    account: request.user,
                    type,
                    signerOrProvider,
                }, config);
            }
            return parametersToOverride;
        }
    });
}
exports.populateOptionalUserParameters = populateOptionalUserParameters;
