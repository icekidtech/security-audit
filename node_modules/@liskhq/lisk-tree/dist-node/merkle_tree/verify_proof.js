"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyDataBlock = exports.verifyProof = void 0;
const lisk_cryptography_1 = require("@liskhq/lisk-cryptography");
const constants_1 = require("./constants");
const utils_1 = require("./utils");
const verifyProof = (queryHashes, proof, rootHash) => {
    const { idxs, siblingHashes, size } = proof;
    if (size === 0) {
        return false;
    }
    let calculatedTree;
    try {
        calculatedTree = (0, utils_1.calculatePathNodes)(queryHashes, size, idxs, siblingHashes);
    }
    catch (error) {
        return false;
    }
    const calculatedRoot = calculatedTree.get(utils_1.ROOT_INDEX);
    if (!calculatedRoot) {
        return false;
    }
    return calculatedRoot.equals(rootHash);
};
exports.verifyProof = verifyProof;
const verifyDataBlock = (queryData, proof, rootHash) => {
    const queryHashes = [];
    for (const data of queryData) {
        const leafValueWithoutNodeIndex = Buffer.concat([constants_1.LEAF_PREFIX, data], constants_1.LEAF_PREFIX.length + data.length);
        const leafHash = lisk_cryptography_1.utils.hash(leafValueWithoutNodeIndex);
        queryHashes.push(leafHash);
    }
    return (0, exports.verifyProof)(queryHashes, proof, rootHash);
};
exports.verifyDataBlock = verifyDataBlock;
//# sourceMappingURL=verify_proof.js.map