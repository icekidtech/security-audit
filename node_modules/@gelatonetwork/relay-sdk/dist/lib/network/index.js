"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSupportedNetworks = exports.isNetworkSupported = void 0;
const utils_1 = require("../../utils");
const isNetworkSupported = (payload, config) => __awaiter(void 0, void 0, void 0, function* () {
    const supportedNetworks = yield (0, exports.getSupportedNetworks)(config);
    return supportedNetworks.includes(payload.chainId.toString());
});
exports.isNetworkSupported = isNetworkSupported;
const getSupportedNetworks = (config) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        return (yield utils_1.axiosInstance.get(`${config.url}/relays/v2`)).data.relays;
    }
    catch (error) {
        throw new Error(`GelatoRelaySDK/getSupportedNetworks: Failed with error: ${(0, utils_1.getHttpErrorMessage)(error)}`);
    }
});
exports.getSupportedNetworks = getSupportedNetworks;
