import { EventCallback, Channel, RegisteredSchemas, ModuleMetadata } from './types';
import { NodeMethods } from './node_methods';
import { BlockMethods } from './block_methods';
import { TransactionMethods } from './transaction_methods';
import { EventMethods } from './event_methods';
export declare class APIClient {
    private readonly _channel;
    private _schema;
    private _metadata;
    private _nodeInfo;
    private _nodeMethods;
    private _blockMethods;
    private _transactionMethods;
    private _eventMethods;
    constructor(channel: Channel);
    init(): Promise<void>;
    disconnect(): Promise<void>;
    invoke<T = Record<string, unknown>>(actionName: string, params?: Record<string, unknown>): Promise<T>;
    subscribe(eventName: string, cb: EventCallback): void;
    get schema(): RegisteredSchemas;
    get metadata(): ModuleMetadata[];
    get node(): NodeMethods;
    get block(): BlockMethods;
    get transaction(): TransactionMethods;
    get event(): EventMethods;
}
