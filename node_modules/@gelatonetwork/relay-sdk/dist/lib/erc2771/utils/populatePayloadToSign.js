"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.populatePayloadToSign = void 0;
const utils_1 = require("../../../utils");
const mapRequestToStruct_1 = require("./mapRequestToStruct");
const getPayloadToSign_1 = require("./getPayloadToSign");
const safeTransformStruct_1 = require("./safeTransformStruct");
function populatePayloadToSign(payload, config) {
    return __awaiter(this, void 0, void 0, function* () {
        const { request, signerOrProvider } = payload;
        if ((0, utils_1.isConcurrentRequest)(request)) {
            const type = payload.type;
            const parametersToOverride = yield (0, utils_1.populateOptionalUserParameters)({
                request,
                type,
                signerOrProvider,
            }, config);
            const struct = yield (0, mapRequestToStruct_1.mapRequestToStruct)(request, parametersToOverride);
            const safeStruct = (0, safeTransformStruct_1.safeTransformStruct)(struct);
            const typedData = (0, getPayloadToSign_1.getPayloadToSign)({
                struct: safeStruct,
                type,
                isSigner: signerOrProvider ? (0, utils_1.isSigner)(signerOrProvider) : undefined,
            }, config);
            return {
                struct,
                typedData,
            };
        }
        else {
            const type = payload.type;
            const parametersToOverride = yield (0, utils_1.populateOptionalUserParameters)({
                request,
                type,
                signerOrProvider,
            }, config);
            const struct = yield (0, mapRequestToStruct_1.mapRequestToStruct)(request, parametersToOverride);
            const safeStruct = (0, safeTransformStruct_1.safeTransformStruct)(struct);
            const typedData = (0, getPayloadToSign_1.getPayloadToSign)({
                struct: safeStruct,
                type,
                isSigner: signerOrProvider ? (0, utils_1.isSigner)(signerOrProvider) : undefined,
            }, config);
            return {
                struct,
                typedData,
            };
        }
    });
}
exports.populatePayloadToSign = populatePayloadToSign;
