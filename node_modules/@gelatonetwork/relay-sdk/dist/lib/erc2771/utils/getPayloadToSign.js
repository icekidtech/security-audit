"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPayloadToSign = void 0;
const utils_1 = require("../../../utils");
const types_1 = require("../../types");
const types_2 = require("../types");
function getPayloadToSign(payload, config) {
    const { isSigner, struct, type } = payload;
    const domain = (0, utils_1.getEIP712Domain)({ chainId: BigInt(struct.chainId), type }, config);
    switch (type) {
        case types_2.ERC2771Type.SponsoredCall:
            if (isSigner) {
                return {
                    domain,
                    types: Object.assign({}, types_2.EIP712_SPONSORED_CALL_ERC2771_TYPE_DATA),
                    message: struct,
                };
            }
            return {
                domain,
                types: Object.assign(Object.assign({}, types_2.EIP712_SPONSORED_CALL_ERC2771_TYPE_DATA), types_1.EIP712_DOMAIN_TYPE_DATA),
                primaryType: "SponsoredCallERC2771",
                message: struct,
            };
        case types_2.ERC2771Type.CallWithSyncFee:
            if (isSigner) {
                return {
                    domain,
                    types: Object.assign({}, types_2.EIP712_CALL_WITH_SYNC_FEE_ERC2771_TYPE_DATA),
                    message: struct,
                };
            }
            return {
                domain,
                types: Object.assign(Object.assign({}, types_2.EIP712_CALL_WITH_SYNC_FEE_ERC2771_TYPE_DATA), types_1.EIP712_DOMAIN_TYPE_DATA),
                primaryType: "CallWithSyncFeeERC2771",
                message: struct,
            };
        case types_2.ERC2771Type.ConcurrentSponsoredCall:
            if (isSigner) {
                return {
                    domain,
                    types: Object.assign({}, types_2.EIP712_SPONSORED_CALL_CONCURRENT_ERC2771_TYPE_DATA),
                    message: struct,
                };
            }
            return {
                domain,
                types: Object.assign(Object.assign({}, types_2.EIP712_SPONSORED_CALL_CONCURRENT_ERC2771_TYPE_DATA), types_1.EIP712_DOMAIN_TYPE_DATA),
                primaryType: "SponsoredCallConcurrentERC2771",
                message: struct,
            };
        case types_2.ERC2771Type.ConcurrentCallWithSyncFee:
            if (isSigner) {
                return {
                    domain,
                    types: Object.assign({}, types_2.EIP712_CALL_WITH_SYNC_FEE_CONCURRENT_ERC2771_TYPE_DATA),
                    message: struct,
                };
            }
            return {
                domain,
                types: Object.assign(Object.assign({}, types_2.EIP712_CALL_WITH_SYNC_FEE_CONCURRENT_ERC2771_TYPE_DATA), types_1.EIP712_DOMAIN_TYPE_DATA),
                primaryType: "CallWithSyncFeeConcurrentERC2771",
                message: struct,
            };
        default:
            // eslint-disable-next-line no-case-declarations
            const _exhaustiveCheck = type;
            return _exhaustiveCheck;
    }
}
exports.getPayloadToSign = getPayloadToSign;
