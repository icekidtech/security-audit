"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _WebsocketHandler_url, _WebsocketHandler_subscriptions, _WebsocketHandler_updateHandlers, _WebsocketHandler_errorHandlers, _WebsocketHandler_websocket, _WebsocketHandler_reconnectIntervalMillis, _WebsocketHandler_connectTimeoutMillis;
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebsocketHandler = void 0;
const isomorphic_ws_1 = __importDefault(require("isomorphic-ws"));
const isFinalTaskState_js_1 = require("./isFinalTaskState.js");
const websocketMessage_js_1 = require("./websocketMessage.js");
class WebsocketHandler {
    constructor(url) {
        _WebsocketHandler_url.set(this, void 0);
        _WebsocketHandler_subscriptions.set(this, new Set());
        _WebsocketHandler_updateHandlers.set(this, []);
        _WebsocketHandler_errorHandlers.set(this, []);
        _WebsocketHandler_websocket.set(this, void 0);
        _WebsocketHandler_reconnectIntervalMillis.set(this, 1000);
        _WebsocketHandler_connectTimeoutMillis.set(this, 10000);
        __classPrivateFieldSet(this, _WebsocketHandler_url, `${url}/tasks/ws/status`, "f");
    }
    onUpdate(handler) {
        if (!handler) {
            throw new Error("Callback handler is not provided");
        }
        __classPrivateFieldGet(this, _WebsocketHandler_updateHandlers, "f").push(handler);
        this._connect();
    }
    offUpdate(handler) {
        if (!handler) {
            throw new Error("Callback handler is not provided");
        }
        __classPrivateFieldSet(this, _WebsocketHandler_updateHandlers, __classPrivateFieldGet(this, _WebsocketHandler_updateHandlers, "f").filter((element) => element !== handler), "f");
        this._disconnectIfUnused();
    }
    onError(handler) {
        if (!handler) {
            throw new Error("Callback handler is not provided");
        }
        __classPrivateFieldGet(this, _WebsocketHandler_errorHandlers, "f").push(handler);
        this._connect();
    }
    offError(handler) {
        if (!handler) {
            throw new Error("Callback handler is not provided");
        }
        __classPrivateFieldSet(this, _WebsocketHandler_errorHandlers, __classPrivateFieldGet(this, _WebsocketHandler_errorHandlers, "f").filter((element) => element !== handler), "f");
        this._disconnectIfUnused();
    }
    subscribe(taskId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (__classPrivateFieldGet(this, _WebsocketHandler_subscriptions, "f").has(taskId)) {
                return;
            }
            __classPrivateFieldGet(this, _WebsocketHandler_subscriptions, "f").add(taskId);
            yield this._sendWebsocketMessage({
                action: "subscribe",
                taskId,
            });
        });
    }
    unsubscribe(taskId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!__classPrivateFieldGet(this, _WebsocketHandler_subscriptions, "f").has(taskId)) {
                return;
            }
            __classPrivateFieldGet(this, _WebsocketHandler_subscriptions, "f").delete(taskId);
            yield this._sendWebsocketMessage({
                action: "unsubscribe",
                taskId,
            });
        });
    }
    hasHandlers() {
        return __classPrivateFieldGet(this, _WebsocketHandler_updateHandlers, "f").length > 0 || __classPrivateFieldGet(this, _WebsocketHandler_errorHandlers, "f").length > 0;
    }
    _connect() {
        if (__classPrivateFieldGet(this, _WebsocketHandler_websocket, "f")) {
            return;
        }
        __classPrivateFieldSet(this, _WebsocketHandler_websocket, new isomorphic_ws_1.default(__classPrivateFieldGet(this, _WebsocketHandler_url, "f")), "f");
        __classPrivateFieldGet(this, _WebsocketHandler_websocket, "f").onopen = () => __awaiter(this, void 0, void 0, function* () {
            __classPrivateFieldGet(this, _WebsocketHandler_subscriptions, "f").forEach((taskId) => {
                this._sendWebsocketMessage({
                    action: "subscribe",
                    taskId,
                });
            });
        });
        __classPrivateFieldGet(this, _WebsocketHandler_websocket, "f").onclose = () => {
            setTimeout(() => {
                this._reconnect();
            }, __classPrivateFieldGet(this, _WebsocketHandler_reconnectIntervalMillis, "f"));
        };
        __classPrivateFieldGet(this, _WebsocketHandler_websocket, "f").onerror = (error) => {
            this._handleError(error);
        };
        __classPrivateFieldGet(this, _WebsocketHandler_websocket, "f").onmessage = (data) => __awaiter(this, void 0, void 0, function* () {
            const message = JSON.parse(data.data.toString());
            switch (message.event) {
                case websocketMessage_js_1.WebsocketEvent.ERROR: {
                    const errorWebsocketMessage = message;
                    const error = errorWebsocketMessage.payload;
                    this._handleError(error);
                    break;
                }
                case websocketMessage_js_1.WebsocketEvent.UPDATE: {
                    const updateWebsocketMessage = message;
                    const taskStatus = updateWebsocketMessage.payload;
                    __classPrivateFieldGet(this, _WebsocketHandler_updateHandlers, "f").forEach((handler) => {
                        handler(taskStatus);
                    });
                    if ((0, isFinalTaskState_js_1.isFinalTaskState)(taskStatus.taskState)) {
                        yield this.unsubscribe(taskStatus.taskId);
                    }
                    break;
                }
                default: {
                    break;
                }
            }
        });
    }
    _sendWebsocketMessage(message) {
        return __awaiter(this, void 0, void 0, function* () {
            const isConnected = yield this._ensureIsConnected();
            if (isConnected) {
                __classPrivateFieldGet(this, _WebsocketHandler_websocket, "f").send(JSON.stringify(message));
            }
        });
    }
    _disconnectIfUnused() {
        if (__classPrivateFieldGet(this, _WebsocketHandler_updateHandlers, "f").length === 0 &&
            __classPrivateFieldGet(this, _WebsocketHandler_errorHandlers, "f").length === 0 &&
            __classPrivateFieldGet(this, _WebsocketHandler_websocket, "f")) {
            this._disconnect();
        }
    }
    _disconnect() {
        if (__classPrivateFieldGet(this, _WebsocketHandler_websocket, "f")) {
            __classPrivateFieldGet(this, _WebsocketHandler_websocket, "f").close();
            __classPrivateFieldSet(this, _WebsocketHandler_websocket, undefined, "f");
        }
    }
    _reconnect() {
        this._disconnect();
        this._connect();
    }
    _ensureIsConnected() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!__classPrivateFieldGet(this, _WebsocketHandler_websocket, "f")) {
                this._connect();
            }
            else if (__classPrivateFieldGet(this, _WebsocketHandler_websocket, "f").readyState !== isomorphic_ws_1.default.CONNECTING &&
                __classPrivateFieldGet(this, _WebsocketHandler_websocket, "f").readyState !== isomorphic_ws_1.default.OPEN) {
                this._reconnect();
            }
            return yield this._awaitConnection();
        });
    }
    _awaitConnection() {
        return __awaiter(this, void 0, void 0, function* () {
            const start = Date.now();
            while (!__classPrivateFieldGet(this, _WebsocketHandler_websocket, "f") || __classPrivateFieldGet(this, _WebsocketHandler_websocket, "f").readyState !== isomorphic_ws_1.default.OPEN) {
                const elapsed = Date.now() - start;
                if (elapsed > __classPrivateFieldGet(this, _WebsocketHandler_connectTimeoutMillis, "f")) {
                    this._handleError(new Error(`Timeout connecting to ${__classPrivateFieldGet(this, _WebsocketHandler_url, "f")} after ${elapsed}ms`));
                    return false;
                }
                yield new Promise((resolve) => setTimeout(resolve, 10));
            }
            return true;
        });
    }
    _handleError(error) {
        __classPrivateFieldGet(this, _WebsocketHandler_errorHandlers, "f").forEach((handler) => {
            handler(error);
        });
    }
}
exports.WebsocketHandler = WebsocketHandler;
_WebsocketHandler_url = new WeakMap(), _WebsocketHandler_subscriptions = new WeakMap(), _WebsocketHandler_updateHandlers = new WeakMap(), _WebsocketHandler_errorHandlers = new WeakMap(), _WebsocketHandler_websocket = new WeakMap(), _WebsocketHandler_reconnectIntervalMillis = new WeakMap(), _WebsocketHandler_connectTimeoutMillis = new WeakMap();
