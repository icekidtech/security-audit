"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEIP712Domain = void 0;
const types_1 = require("../lib/erc2771/types");
const relayAddress_1 = require("./relayAddress");
const getEIP712Domain = (payload, config) => {
    const { chainId, type } = payload;
    switch (type) {
        case types_1.ERC2771Type.CallWithSyncFee:
            return {
                name: "GelatoRelayERC2771",
                version: "1",
                chainId: chainId.toString(),
                verifyingContract: (0, relayAddress_1.getGelatoRelayERC2771Address)({ chainId, type }, config),
            };
        case types_1.ERC2771Type.SponsoredCall:
            return {
                name: "GelatoRelay1BalanceERC2771",
                version: "1",
                chainId: chainId.toString(),
                verifyingContract: (0, relayAddress_1.getGelatoRelayERC2771Address)({ chainId, type }, config),
            };
        case types_1.ERC2771Type.ConcurrentCallWithSyncFee:
            return {
                name: "GelatoRelayConcurrentERC2771",
                version: "1",
                chainId: chainId.toString(),
                verifyingContract: (0, relayAddress_1.getGelatoRelayERC2771Address)({ chainId, type }, config),
            };
        case types_1.ERC2771Type.ConcurrentSponsoredCall:
            return {
                name: "GelatoRelay1BalanceConcurrentERC2771",
                version: "1",
                chainId: chainId.toString(),
                verifyingContract: (0, relayAddress_1.getGelatoRelayERC2771Address)({ chainId, type }, config),
            };
        default:
            // eslint-disable-next-line no-case-declarations
            const _exhaustiveCheck = type;
            return _exhaustiveCheck;
    }
};
exports.getEIP712Domain = getEIP712Domain;
