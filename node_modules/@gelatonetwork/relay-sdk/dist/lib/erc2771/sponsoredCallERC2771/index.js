"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.relayWithSponsoredCallERC2771 = void 0;
const utils_1 = require("../../../utils");
const types_1 = require("../../types");
const types_2 = require("../types");
const index_js_1 = require("../getSignatureDataERC2771/index.js");
const safeTransformStruct_js_1 = require("../utils/safeTransformStruct.js");
const relayWithSponsoredCallERC2771 = (payload, config) => __awaiter(void 0, void 0, void 0, function* () {
    return yield sponsoredCallERC2771(payload, config);
});
exports.relayWithSponsoredCallERC2771 = relayWithSponsoredCallERC2771;
const sponsoredCallERC2771 = (payload, config) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { request, sponsorApiKey, signerOrProvider, options } = payload;
        if ((0, utils_1.isConcurrentRequest)(request)) {
            const isConcurrent = true;
            const type = types_2.ERC2771Type.ConcurrentSponsoredCall;
            const { struct, signature } = yield (0, index_js_1.getSignatureDataERC2771)({
                request,
                signerOrProvider,
                type,
            }, config);
            return yield (0, utils_1.post)({
                relayCall: types_1.RelayCall.SponsoredCallERC2771,
                request: Object.assign(Object.assign({}, (0, safeTransformStruct_js_1.safeTransformStruct)(struct)), { userSignature: signature, sponsorApiKey,
                    isConcurrent, gasLimit: (options === null || options === void 0 ? void 0 : options.gasLimit)
                        ? options.gasLimit.toString()
                        : undefined, retries: options === null || options === void 0 ? void 0 : options.retries }),
            }, config);
        }
        else {
            const isConcurrent = false;
            const type = types_2.ERC2771Type.SponsoredCall;
            const { struct, signature } = yield (0, index_js_1.getSignatureDataERC2771)({
                request,
                signerOrProvider,
                type,
            }, config);
            return yield (0, utils_1.post)({
                relayCall: types_1.RelayCall.SponsoredCallERC2771,
                request: Object.assign(Object.assign({}, (0, safeTransformStruct_js_1.safeTransformStruct)(struct)), { userSignature: signature, sponsorApiKey,
                    isConcurrent, gasLimit: (options === null || options === void 0 ? void 0 : options.gasLimit)
                        ? options.gasLimit.toString()
                        : undefined, retries: options === null || options === void 0 ? void 0 : options.retries }),
            }, config);
        }
    }
    catch (error) {
        const errorMessage = error.message;
        throw new Error(`GelatoRelaySDK/sponsoredCallERC2771: Failed with error: ${errorMessage}`);
    }
});
