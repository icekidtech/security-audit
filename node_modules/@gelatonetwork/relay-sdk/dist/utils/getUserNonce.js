"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUserNonce = void 0;
const ethers_1 = require("ethers");
const constants_1 = require("../constants");
const relayAddress_1 = require("./relayAddress");
const getProviderChainId_1 = require("./getProviderChainId");
const getUserNonce = (payload, config) => __awaiter(void 0, void 0, void 0, function* () {
    const { account, type, signerOrProvider } = payload;
    if (!signerOrProvider.provider) {
        throw new Error(`Missing provider`);
    }
    const chainId = yield (0, getProviderChainId_1.getProviderChainId)(signerOrProvider);
    const contract = new ethers_1.Contract((0, relayAddress_1.getGelatoRelayERC2771Address)({ chainId, type }, config), constants_1.USER_NONCE_ABI, signerOrProvider);
    return (yield contract.userNonce(account));
});
exports.getUserNonce = getUserNonce;
