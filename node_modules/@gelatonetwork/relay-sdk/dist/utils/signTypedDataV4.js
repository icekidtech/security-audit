"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.signTypedDataV4 = void 0;
const constants_1 = require("../constants");
const isSigner_1 = require("./isSigner");
const signTypedDataV4 = (signerOrProvider, address, payload) => __awaiter(void 0, void 0, void 0, function* () {
    if ((0, isSigner_1.isSigner)(signerOrProvider)) {
        return yield signerOrProvider.signTypedData(payload.domain, payload.types, payload.message);
    }
    // Magic Connect accepts payload as an object
    if (signerOrProvider.provider.isMagic) {
        return yield signerOrProvider.send(constants_1.SIGN_TYPED_DATA_V4, [address, payload]);
    }
    const signature = yield signerOrProvider.send(constants_1.SIGN_TYPED_DATA_V4, [
        address,
        JSON.stringify(payload),
    ]);
    // Support both versions of `eth_sign` responses
    return signature.replace(/00$/, "1b").replace(/01$/, "1c");
});
exports.signTypedDataV4 = signTypedDataV4;
