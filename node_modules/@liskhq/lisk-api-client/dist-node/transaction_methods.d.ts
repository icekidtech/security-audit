/// <reference types="node" />
import { Options } from '@liskhq/lisk-transactions';
import { Channel, RegisteredSchemas, NodeInfo, ModuleMetadata, DecodedTransaction, TransactionJSON, DecodedTransactionJSON } from './types';
export declare class TransactionMethods {
    private readonly _channel;
    private readonly _metadata;
    private readonly _schema;
    private readonly _nodeInfo;
    constructor(channel: Channel, registeredSchema: RegisteredSchemas, moduleMetadata: ModuleMetadata[], nodeInfo: NodeInfo);
    create<T = Record<string, unknown>>(input: {
        module: string;
        command: string;
        fee: bigint | string;
        nonce?: bigint | string;
        senderPublicKey?: string;
        params: T;
        signatures?: string[];
    }, privateKeyHex: string): Promise<DecodedTransactionJSON<T>>;
    get(id: Buffer | string): Promise<DecodedTransaction>;
    getFromPool(): Promise<DecodedTransaction[]>;
    sign(transaction: Record<string, unknown>, privateKeyHexes: string[]): Promise<DecodedTransactionJSON>;
    send(transaction: DecodedTransactionJSON): Promise<{
        transactionId: string;
    }>;
    decode<T = Record<string, unknown>>(transaction: Buffer | string): DecodedTransaction<T>;
    encode(transaction: Record<string, unknown>): Buffer;
    computeMinFee(transaction: Omit<DecodedTransactionJSON, 'id'>, options?: Options): bigint;
    toJSON(transaction: Record<string, unknown>): DecodedTransactionJSON;
    fromJSON<T = Record<string, unknown>>(transaction: TransactionJSON | DecodedTransactionJSON): DecodedTransaction<T>;
    private _validateTransaction;
}
