"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _GelatoRelay_config, _GelatoRelay_websocketHandler;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GelatoRelay = exports.TaskState = exports.ERC2771Type = void 0;
const library = __importStar(require("./lib"));
const types_1 = require("./lib/erc2771/types");
Object.defineProperty(exports, "ERC2771Type", { enumerable: true, get: function () { return types_1.ERC2771Type; } });
const types_2 = require("./lib/status/types");
Object.defineProperty(exports, "TaskState", { enumerable: true, get: function () { return types_2.TaskState; } });
const constants_1 = require("./constants");
const index_js_1 = require("./utils/index.js");
class GelatoRelay {
    constructor(config) {
        _GelatoRelay_config.set(this, void 0);
        _GelatoRelay_websocketHandler.set(this, void 0);
        /**
         * @param {Config} config Configuration
         */
        this.configure = (config) => {
            __classPrivateFieldSet(this, _GelatoRelay_config, this._getConfiguration(config), "f");
        };
        this._getConfiguration = (config) => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;
            const url = (_a = config === null || config === void 0 ? void 0 : config.url) !== null && _a !== void 0 ? _a : constants_1.GELATO_RELAY_URL;
            return {
                url,
                websocketUrl: url.replace(/^http/, "ws"),
                contract: {
                    relayERC2771: (_c = (_b = config === null || config === void 0 ? void 0 : config.contract) === null || _b === void 0 ? void 0 : _b.relayERC2771) !== null && _c !== void 0 ? _c : constants_1.GELATO_RELAY_ERC2771_ADDRESS,
                    relay1BalanceERC2771: (_e = (_d = config === null || config === void 0 ? void 0 : config.contract) === null || _d === void 0 ? void 0 : _d.relay1BalanceERC2771) !== null && _e !== void 0 ? _e : constants_1.GELATO_RELAY_1BALANCE_ERC2771_ADDRESS,
                    relayERC2771zkSync: (_g = (_f = config === null || config === void 0 ? void 0 : config.contract) === null || _f === void 0 ? void 0 : _f.relayERC2771zkSync) !== null && _g !== void 0 ? _g : constants_1.GELATO_RELAY_ERC2771_ZKSYNC_ADDRESS,
                    relayERC2771Abstract: (_j = (_h = config === null || config === void 0 ? void 0 : config.contract) === null || _h === void 0 ? void 0 : _h.relayERC2771Abstract) !== null && _j !== void 0 ? _j : constants_1.GELATO_RELAY_ERC2771_ABSTRACT_ADDRESS,
                    relay1BalanceERC2771zkSync: (_l = (_k = config === null || config === void 0 ? void 0 : config.contract) === null || _k === void 0 ? void 0 : _k.relay1BalanceERC2771zkSync) !== null && _l !== void 0 ? _l : constants_1.GELATO_RELAY_1BALANCE_ERC2771_ZKSYNC_ADDRESS,
                    relay1BalanceERC2771Abstract: (_o = (_m = config === null || config === void 0 ? void 0 : config.contract) === null || _m === void 0 ? void 0 : _m.relay1BalanceERC2771Abstract) !== null && _o !== void 0 ? _o : constants_1.GELATO_RELAY_1BALANCE_ERC2771_ABSTRACT_ADDRESS,
                    relayConcurrentERC2771: (_q = (_p = config === null || config === void 0 ? void 0 : config.contract) === null || _p === void 0 ? void 0 : _p.relayConcurrentERC2771) !== null && _q !== void 0 ? _q : constants_1.GELATO_RELAY_CONCURRENT_ERC2771_ADDRESS,
                    relay1BalanceConcurrentERC2771: (_s = (_r = config === null || config === void 0 ? void 0 : config.contract) === null || _r === void 0 ? void 0 : _r.relay1BalanceConcurrentERC2771) !== null && _s !== void 0 ? _s : constants_1.GELATO_RELAY_1BALANCE_CONCURRENT_ERC2771_ADDRESS,
                    relayConcurrentERC2771zkSync: (_u = (_t = config === null || config === void 0 ? void 0 : config.contract) === null || _t === void 0 ? void 0 : _t.relayConcurrentERC2771zkSync) !== null && _u !== void 0 ? _u : constants_1.GELATO_RELAY_CONCURRENT_ERC2771_ZKSYNC_ADDRESS,
                    relayConcurrentERC2771Abstract: (_w = (_v = config === null || config === void 0 ? void 0 : config.contract) === null || _v === void 0 ? void 0 : _v.relayConcurrentERC2771Abstract) !== null && _w !== void 0 ? _w : constants_1.GELATO_RELAY_CONCURRENT_ERC2771_ABSTRACT_ADDRESS,
                    relay1BalanceConcurrentERC2771zkSync: (_y = (_x = config === null || config === void 0 ? void 0 : config.contract) === null || _x === void 0 ? void 0 : _x.relay1BalanceConcurrentERC2771zkSync) !== null && _y !== void 0 ? _y : constants_1.GELATO_RELAY_1BALANCE_CONCURRENT_ERC2771_ZKSYNC_ADDRESS,
                    relay1BalanceConcurrentERC2771Abstract: (_0 = (_z = config === null || config === void 0 ? void 0 : config.contract) === null || _z === void 0 ? void 0 : _z.relay1BalanceConcurrentERC2771Abstract) !== null && _0 !== void 0 ? _0 : constants_1.GELATO_RELAY_1BALANCE_CONCURRENT_ERC2771_ABSTRACT_ADDRESS,
                },
            };
        };
        /**
         * @param {CallWithSyncFeeRequest} request - CallWithSyncFee request to be relayed by Gelato Executors
         * @param {RelayRequestOptions} [options] - Optional Relay configuration
         * @param {string} [sponsorApiKey] Optional Sponsor API key to be used for the call
         * @returns {Promise<RelayResponse>} Response object with taskId parameter
         *
         */
        this.callWithSyncFee = (request, options, sponsorApiKey) => __awaiter(this, void 0, void 0, function* () {
            const response = yield library.relayWithSyncFee({ request, sponsorApiKey, options }, __classPrivateFieldGet(this, _GelatoRelay_config, "f"));
            if (__classPrivateFieldGet(this, _GelatoRelay_websocketHandler, "f").hasHandlers()) {
                yield __classPrivateFieldGet(this, _GelatoRelay_websocketHandler, "f").subscribe(response.taskId);
            }
            return response;
        });
        /**
         * @param {CallWithSyncFeeERC2771Request | CallWithSyncFeeConcurrentERC2771Request} request - Call with sync fee: Sequential ERC2771 or Concurrent ERC2771 request to be relayed by Gelato Executors
         * @param {SignerOrProvider} signerOrProvider - BrowserProvider [front-end] or Signer [back-end] to sign the payload
         * @param {RelayRequestOptions} [options] - Optional Relay configuration
         * @param {string} [sponsorApiKey] Optional Sponsor API key to be used for the call
         * @returns {Promise<RelayResponse>} Response object with taskId parameter
         *
         */
        this.callWithSyncFeeERC2771 = (request, signerOrProvider, options, sponsorApiKey) => __awaiter(this, void 0, void 0, function* () {
            const response = yield library.relayWithCallWithSyncFeeERC2771({
                request,
                signerOrProvider,
                sponsorApiKey,
                options,
            }, __classPrivateFieldGet(this, _GelatoRelay_config, "f"));
            if (__classPrivateFieldGet(this, _GelatoRelay_websocketHandler, "f").hasHandlers()) {
                yield __classPrivateFieldGet(this, _GelatoRelay_websocketHandler, "f").subscribe(response.taskId);
            }
            return response;
        });
        /**
         * @param {SponsoredCallRequest} request SponsoredCallRequest to be relayed by the Gelato Executors.
         * @param {string} sponsorApiKey Sponsor API key to be used for the call
         * @param {RelayRequestOptions} [options] Optional Relay configuration
         * @returns {Promise<RelayResponse>} Response object with taskId parameter
         *
         */
        this.sponsoredCall = (request, sponsorApiKey, options) => __awaiter(this, void 0, void 0, function* () {
            const response = yield library.relayWithSponsoredCall({ request, sponsorApiKey, options }, __classPrivateFieldGet(this, _GelatoRelay_config, "f"));
            if (__classPrivateFieldGet(this, _GelatoRelay_websocketHandler, "f").hasHandlers()) {
                yield __classPrivateFieldGet(this, _GelatoRelay_websocketHandler, "f").subscribe(response.taskId);
            }
            return response;
        });
        /**
         * @param {CallWithERC2771Request | CallWithConcurrentERC2771Request} request - Sponsored: Sequential ERC2771 or Concurrent ERC2771 request to be relayed by Gelato Executors
         * @param {SignerOrProvider} signerOrProvider - BrowserProvider [front-end] or Signer [back-end] to sign the payload
         * @param {string} sponsorApiKey - Sponsor API key
         * @param {RelayRequestOptions} [options] - Optional Relay configuration
         * @returns {Promise<RelayResponse>} Response object with taskId parameter
         *
         */
        this.sponsoredCallERC2771 = (request, signerOrProvider, sponsorApiKey, options) => __awaiter(this, void 0, void 0, function* () {
            const response = yield library.relayWithSponsoredCallERC2771({
                request,
                signerOrProvider,
                sponsorApiKey,
                options,
            }, __classPrivateFieldGet(this, _GelatoRelay_config, "f"));
            if (__classPrivateFieldGet(this, _GelatoRelay_websocketHandler, "f").hasHandlers()) {
                yield __classPrivateFieldGet(this, _GelatoRelay_websocketHandler, "f").subscribe(response.taskId);
            }
            return response;
        });
        /**
         * @param {CallWithERC2771Request | CallWithConcurrentERC2771Request} request - Sequential ERC2771 or Concurrent ERC2771 request to be relayed by Gelato Executors
         * @param {SignerOrProvider} signerOrProvider - BrowserProvider [front-end] or Signer [back-end] to sign the payload
         * @param {ERC2771Type} type - ERC2771Type.CallWithSyncFee or ERC2771Type.SponsoredCall
         * @returns {Promise<SignatureData>} Response object with struct and signature
         *
         */
        this.getSignatureDataERC2771 = (request, signerOrProvider, type) => library.getSignatureDataERC2771({ request, signerOrProvider, type }, __classPrivateFieldGet(this, _GelatoRelay_config, "f"));
        /**
         * @param {CallWithERC2771Request | CallWithConcurrentERC2771Request} request - Sequential ERC2771 or Concurrent ERC2771 request to be relayed by Gelato Executors
         * @param {SignerOrProvider} [signerOrProvider] - Optional BrowserProvider [front-end] or Signer [back-end] to sign the payload
         * @param {ERC2771Type} type - ERC2771Type.CallWithSyncFee or ERC2771Type.SponsoredCall
         * @returns {Promise<PayloadToSign>} Response object with struct and typed data
         *
         */
        this.getDataToSignERC2771 = (request, type, signerOrProvider) => library.getDataToSignERC2771({ request, signerOrProvider, type }, __classPrivateFieldGet(this, _GelatoRelay_config, "f"));
        /**
         * @param {SignatureData["struct"]} struct - Struct that can be obtained from getSignatureDataERC2771
         * @param {SignatureData["signature"]} signature - Signature that can be obtained from getSignatureDataERC2771
         * @param {string} sponsorApiKey - Sponsor API key
         * @param {RelayRequestOptions} [options] - Optional Relay configuration
         * @returns {Promise<RelayResponse>} Response object with taskId parameter
         *
         */
        this.sponsoredCallERC2771WithSignature = (struct, signature, sponsorApiKey, options) => __awaiter(this, void 0, void 0, function* () {
            const response = yield library.sponsoredCallERC2771WithSignature({
                struct,
                signature,
                sponsorApiKey,
                options,
            }, __classPrivateFieldGet(this, _GelatoRelay_config, "f"));
            if (__classPrivateFieldGet(this, _GelatoRelay_websocketHandler, "f").hasHandlers()) {
                yield __classPrivateFieldGet(this, _GelatoRelay_websocketHandler, "f").subscribe(response.taskId);
            }
            return response;
        });
        /**
         * @param {SignatureData["struct"]} struct - Struct that can be obtained from getSignatureDataERC2771
         * @param {BaseCallWithSyncFeeParams} syncFeeParams - Call with Sync Fee parameters
         * @param {SignatureData["signature"]} signature - Signature that can be obtained from getSignatureDataERC2771
         * @param {RelayRequestOptions} [options] - Optional Relay configuration
         * @param {string} [sponsorApiKey] Optional Sponsor API key to be used for the call
         * @returns {Promise<RelayResponse>} Response object with taskId parameter
         *
         */
        this.callWithSyncFeeERC2771WithSignature = (struct, syncFeeParams, signature, options, sponsorApiKey) => __awaiter(this, void 0, void 0, function* () {
            const response = yield library.callWithSyncFeeERC2771WithSignature({
                struct,
                syncFeeParams,
                signature,
                options,
                sponsorApiKey,
            }, __classPrivateFieldGet(this, _GelatoRelay_config, "f"));
            if (__classPrivateFieldGet(this, _GelatoRelay_websocketHandler, "f").hasHandlers()) {
                yield __classPrivateFieldGet(this, _GelatoRelay_websocketHandler, "f").subscribe(response.taskId);
            }
            return response;
        });
        /**
         * @param {bigint} chainId - Chain Id
         * @returns {Promise<boolean>} Boolean to demonstrate if Relay V2 is supported on the provided chain
         */
        this.isNetworkSupported = (chainId) => library.isNetworkSupported({ chainId }, __classPrivateFieldGet(this, _GelatoRelay_config, "f"));
        /**
         * @returns {Promise<string[]>} List of networks where Relay V2 is supported
         */
        this.getSupportedNetworks = () => library.getSupportedNetworks(__classPrivateFieldGet(this, _GelatoRelay_config, "f"));
        /**
         * @param {bigint} chainId - Chain Id
         * @returns {Promise<boolean>} Boolean to demonstrate if the oracle is active on the provided chain
         */
        this.isOracleActive = (chainId) => library.isOracleActive({ chainId }, __classPrivateFieldGet(this, _GelatoRelay_config, "f"));
        /**
         * @returns {Promise<string[]>} List of chain ids where the Gelato Oracle is active
         */
        this.getGelatoOracles = () => library.getGelatoOracles(__classPrivateFieldGet(this, _GelatoRelay_config, "f"));
        /**
         * @param {bigint} chainId - Chain Id
         * @returns {Promise<string[]>} List of all payment tokens on the provided chain
         *
         */
        this.getPaymentTokens = (chainId) => library.getPaymentTokens({ chainId }, __classPrivateFieldGet(this, _GelatoRelay_config, "f"));
        /**
         * @param {bigint} chainId - Chain Id
         * @param {string} paymentToken - Payment Token
         * @param {bigint} gasLimit - Gas Limit
         * @param {boolean} isHighPriority - Priority Level
         * @param {bigint} [gasLimitL1=BigInt(0)] - Gas Limit for Layer 1
         * @returns {Promise<bigint>} Estimated Fee
         *
         */
        this.getEstimatedFee = (chainId, paymentToken, gasLimit, isHighPriority, gasLimitL1 = BigInt(0)) => library.getEstimatedFee({ chainId, paymentToken, gasLimit, isHighPriority, gasLimitL1 }, __classPrivateFieldGet(this, _GelatoRelay_config, "f"));
        /**
         * @param {string} taskId - Task Id
         * @returns {Promise<TransactionStatusResponse | undefined>} Transaction status of the task id
         *
         */
        this.getTaskStatus = (taskId) => library.getTaskStatus({ taskId }, __classPrivateFieldGet(this, _GelatoRelay_config, "f"));
        /**
         * @param {callback} handler - Callback function to be called on every task status update
         *
         */
        this.onTaskStatusUpdate = (handler) => {
            __classPrivateFieldGet(this, _GelatoRelay_websocketHandler, "f").onUpdate(handler);
        };
        /**
         * @param {callback} handler - Callback function to be unregistered from task status updates
         *
         */
        this.offTaskStatusUpdate = (handler) => {
            __classPrivateFieldGet(this, _GelatoRelay_websocketHandler, "f").offUpdate(handler);
        };
        /**
         * @param {callback} handler - Callback function to be called on error
         *
         */
        this.onError = (handler) => {
            __classPrivateFieldGet(this, _GelatoRelay_websocketHandler, "f").onError(handler);
        };
        /**
         * @param {callback} handler - Callback function to be unregistered as an error handler
         *
         */
        this.offError = (handler) => {
            __classPrivateFieldGet(this, _GelatoRelay_websocketHandler, "f").offError(handler);
        };
        /**
         * @param {string} taskId - Task Id
         *
         */
        this.subscribeTaskStatusUpdate = (taskId) => __awaiter(this, void 0, void 0, function* () {
            yield __classPrivateFieldGet(this, _GelatoRelay_websocketHandler, "f").subscribe(taskId);
        });
        /**
         * @param {string} taskId - Task Id
         *
         */
        this.unsubscribeTaskStatusUpdate = (taskId) => __awaiter(this, void 0, void 0, function* () {
            yield __classPrivateFieldGet(this, _GelatoRelay_websocketHandler, "f").unsubscribe(taskId);
        });
        __classPrivateFieldSet(this, _GelatoRelay_config, this._getConfiguration(config), "f");
        __classPrivateFieldSet(this, _GelatoRelay_websocketHandler, new index_js_1.WebsocketHandler(__classPrivateFieldGet(this, _GelatoRelay_config, "f").websocketUrl), "f");
    }
}
exports.GelatoRelay = GelatoRelay;
_GelatoRelay_config = new WeakMap(), _GelatoRelay_websocketHandler = new WeakMap();
